var Util = function() {
    return {
        // == Get the child index from an array of children elements.
        childIndex: function(child, children) {
            var numberOfChildren = children.length;
            for (var i = 0; i < numberOfChildren; ++i) {
                if (child === children[i]) {
                    return i;
                }
            }
        },

        // == Check if an element has a given class name.
        hasClass: function(element, className) {
            return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
        },

        // == Check if an element doesn't have a given class.
        doesntHaveClass: function(element, className) {
            return ! this.hasClass(element, className);
        },

        // == Get a random item from an array.
        randomItem: function(array) {
            return array[this.randomNumber(array.length)];
        },

        // == Remove a class from an element.
        removeClass: function(element, className) {
            if (this.hasClass(element, className)) {
                element.classList.remove(className);
            }
        },

        // == Shuffle an array. Taken from: http://stackoverflow.com/a/6274381
        shuffleArray: function(a) {
            var j, x, i;

            for (i = a.length; i; i--) {
                j = this.randomNumber(i);
                x = a[i - 1];
                a[i - 1] = a[j];
                a[j] = x;
            }

            return a;
        },

        randomNumber: function(num) {
            var number = Math.floor(Math.random() * num);
            
            if (number === 0) {
                return 1;
            }

            return number;
        }
    }
}();
var EventHandler = function () {
    var id = 0, listeners = [];

    return {
        addListener: function(event, handler, element) {
            id++;
            element.addEventListener(event, handler);
            
            listeners[id] = {
                event: event,
                handler: handler,
                element: element
            };
            
            return id;
        },

        removeListener: function(id) {            
            if (id in listeners) {
                var handler = listeners[id];
                handler.element.removeEventListener(handler.event, handler.handler);
                delete listeners[id];
            }
        }
    }
}();
function Space() {
    this.canvas = document.getElementById("space");
    this.canvas.width = window.innerWidth;
    this.canvas.height = window.innerHeight;
    this.ctx = this.canvas.getContext("2d");
    
    this.starsPerGalaxy = 250;
    this.numberOfGalaxies = 15;
    this.maxGalaxySize = { xRad: 150, yRad: 100 };
    this.maxStarSize = 2;
    this.numberOfStars = 4000;
}

Space.prototype.make = function() {
    for(var i=0; i < this.numberOfStars; i++) {
        this.star();
    }    

    for(var i=0; i < this.numberOfGalaxies; i++) {
        this.galaxy();
    }
};

Space.prototype.star = function(x=null, y=null) {
    var ctx = this.ctx;
    var r = Util.randomNumber(this.maxStarSize);

    if (x === null) {
        var x = Util.randomNumber(this.canvas.width);    
    }

    if (y === null) {
        var y = Util.randomNumber(this.canvas.height);
        ctx.beginPath();
    }

    ctx.fillStyle = "rgba(255, 255, 255," + 1 / Util.randomNumber(10) + ")";
    ctx.beginPath();
    ctx.arc(x, y, r, 0, 2 * Math.PI, true);
    ctx.closePath();
    ctx.fill();
};

Space.prototype.galaxy = function() {
    var ctx = this.ctx;
    var x = Util.randomNumber(this.canvas.width);
    var y = Util.randomNumber(this.canvas.height);
    var xRad = Util.randomNumber(this.maxGalaxySize.xRad);
    var yRad = Util.randomNumber(this.maxGalaxySize.yRad);

    this.galaxyStars(ctx, x, y, xRad, yRad);
};

Space.prototype.galaxyStars = function(ctx, x, y, xRad, yRad) {
    var xGalaxyCenter = x;
    var yGalaxyCenter = y;
    var xAmount = null;
    var yAmount = null;

    for(var i=0; i < this.starsPerGalaxy; i++) {
        xAmount = Util.randomNumber(xRad);
        if (Util.randomNumber(2) === 0) { xAmount = -Math.abs(xAmount); }
        x = (xGalaxyCenter + xAmount * yRad / yAmount) / Math.tan(xRad);
        
        yAmount = Util.randomNumber(yRad);
        if (Util.randomNumber(2) === 0) { yAmount = -Math.abs(yAmount); }
        y = (yGalaxyCenter + yAmount * xRad / xAmount) / Math.tan(yRad);
        
        ctx.moveTo(x, y);
        this.star(x, y);
    }
};
function Vector(element) {
    this.element = element;
}

Vector.prototype.north = function() {
    var vectorCell = this.element.parentElement;
    var vectorRow = vectorCell.parentElement;
    var vectorRowChildren = vectorRow.children;
    var vectorIndex = Util.childIndex(vectorCell, vectorRowChildren);
    var previousRow = vectorRow.previousElementSibling;

    if (previousRow) {
        return previousRow.children[vectorIndex];    
    }

    // == First row.
    return null;
}

Vector.prototype.east = function() {
    return this.element.parentElement.nextElementSibling;
}

Vector.prototype.south = function() {
    var vectorCell = this.element.parentElement;
    var vectorRow = vectorCell.parentElement;
    var vectorRowChildren = vectorRow.children;
    var vectorIndex = Util.childIndex(vectorCell, vectorRowChildren);
    var nextRow = vectorRow.nextElementSibling;

    if (nextRow) {
        return nextRow.children[vectorIndex];    
    }

    // == Last row.
    return null;
}

Vector.prototype.west = function() {
    return this.element.parentElement.previousElementSibling;
}
function Move(element) {
    this.element = element;
}

Move.prototype.direction = function(keyCode) {
    switch(keyCode) {
        case 38: 
            this.north(new Vector(this.element));
            break;
        case 39:
            this.east(new Vector(this.element));
            break;
        case 40:
            this.south(new Vector(this.element));
            break;
        case 37:
            this.west(new Vector(this.element));
            break;
        default:
            return false;
    }
}

Move.prototype.north = function(vector) {
    if (vector.north()) {
        vector.north().appendChild(vector.element);
    }

    return false;
};

Move.prototype.east = function(vector) {
    if (vector.east()) {
        vector.east().appendChild(vector.element);
    }

    return false;
};

Move.prototype.south = function(vector) {
    if (vector.south()) {
        vector.south().appendChild(vector.element);
    }

    return false;
};

Move.prototype.west = function(vector) {
    if(vector.west()) {
        vector.west().appendChild(vector.element);    
    }

    return false;
};
function Painter(element) {
    this.element = element;
    this.paintClass = 'painted';
    this.npcPaintClass = 'npc-painted';
}

Painter.prototype.paint = function() {
    this.removePaint(this.npcPaintClass);

    if (Util.doesntHaveClass(this.element.parentElement, this.paintClass)) {
        this.element.parentElement.className += ' ' + this.paintClass;
    }
};

Painter.prototype.removePaint = function(paintClass) {
    Util.removeClass(this.element.parentElement, paintClass);
};

Painter.prototype.npcPaint = function() {
    this.removePaint(this.paintClass);

    if (Util.doesntHaveClass(this.element.parentElement, this.npcPaintClass)) {
        this.element.parentElement.className += ' ' + this.npcPaintClass;
    }
};

Painter.prototype.isPaintable = function (element, character) {
    if (character instanceof Npc) {
        var paint = this.npcPaintClass;
    }

    if (character instanceof Player) {
        var paint = this.paintClass;
    }

    return Util.doesntHaveClass(element, paint);
};

function Character(id) {
    this.element = document.getElementById(id);
    this.move = new Move(this.element);
    this.painter = new Painter(this.element);
}
function Player(Character) {
    this.character = Character;
    this.score = document.getElementById("player-score");
    this.movement = {
            keys: [38, 39, 40, 37], // == Arrow keys
            handlers: []
        };
}

Player.prototype.play = function() {
    this.enableMovement();
};

Player.prototype.enableMovement = function() {
    var player = this;
    var longPress = true;
    var movement = this.movement;

    // == Add event listener for arrow key down.
    movement.handlers.push(
        EventHandler.addListener("keydown", function(e) {
            // == If an arrowkey was pressed.
            if (movement.keys.indexOf(e.keyCode) > -1) { 
                // == Prevent default behavior.
                e.preventDefault();

                // == Don't move player if holding down arrow key.
                if (! longPress) {
                    return e.keyCode;
                }

                // == Disable long press.
                longPress = false;

                // == Move the player.
                player.character.move.direction(e.keyCode);
                
                // == Paint the square.
                player.character.painter.paint();

                // == Update the score.
                player.updateScore();
            }
        }, window)
    );

    // == Add event listener for arrow key up.
    movement.handlers.push(
        EventHandler.addListener("keyup", function(e) {
            // == If an arrowkey was released.
            if (movement.keys.indexOf(e.keyCode) > -1) { 
                // == Turn long press back on.
                longPress = true;
            }
        }, window)
    );
}

Player.prototype.disableMovement = function () {
    var numOfMovementHandlers = this.movement.handlers.length;

    // == Remove all movement event listeners.
    for(i=0; i < numOfMovementHandlers; i++) {
        EventHandler.removeListener(this.movement.handlers[i]);
    }
}

Player.prototype.currentScore = function() {
    return document.getElementsByClassName("painted").length;
}

Player.prototype.updateScore = function() {
    this.score.innerHTML = this.currentScore();
}

Player.prototype.stop = function() {
    this.disableMovement();
}
function Npc(Character) {
    this.character = Character;
    this.vector = new Vector;
    this.arrowKeys = [38, 39, 40, 37];

    this.speed = 150; // == in milliseconds
    this.score = document.getElementById("npc-score");
    this.playing = null;
}

Npc.prototype.play = function() {
    var npc = this;

    npc.playing = setInterval(function() {
        npc.move();
        npc.character.painter.npcPaint();
        npc.updateScore();
    }, npc.speed);
};

Npc.prototype.move = function() {
    var direction = this.look(this.character.element);

    if (direction === false) {
        return this.moveRandom();
    }

    this.character.move.direction(direction);
};

Npc.prototype.look = function(element) {
    var numOfDirections = this.arrowKeys.length;
    var arrowKeys = Util.shuffleArray(this.arrowKeys);

    for(var i=0; i < numOfDirections; i++) {
        if (this.isPaintable(element, arrowKeys[i])) {
            return arrowKeys[i];
        }
    }
    
    return false;
};

Npc.prototype.isPaintable = function(currentLocationElement, direction) {
    var currentVector = new Vector(currentLocationElement);
    var newVector = this.getVector(currentVector, direction);

    if (newVector) {
        return this.character.painter.isPaintable(newVector, this);
    }

    return false;

};

Npc.prototype.getVector = function(currentVector, direction) {
    switch(direction) {
        case 38: 
            return currentVector.north();
        case 39: 
            return currentVector.east();
        case 40: 
            return currentVector.south();
        case 37: 
            return currentVector.west();
        default:
            return false;
    }
};

Npc.prototype.moveRandom = function() {
    var randomDirection = null;
    var npc = this;

    randomDirection = Util.randomItem(npc.arrowKeys);
    npc.character.move.direction(randomDirection);

    return true;
};

Npc.prototype.currentScore = function() {
    return document.getElementsByClassName("npc-painted").length;
};

Npc.prototype.updateScore = function() {
    this.score.innerHTML = this.currentScore();
};

Npc.prototype.stop = function() {
    clearInterval(this.playing);
};
function Game(player, npc, timeLimit) {
    this.player = new Player(new Character(player));
    this.npc = new Npc(new Character(npc));
    this.space = new Space();

    this.cells = document.getElementsByClassName("cell");
    
    this.clock = {
        element: document.getElementById("clock"),
        timeElement: document.getElementById("clockTime"),
        timeLimit: timeLimit,
        timeLeft: timeLimit,
        running: null
    }

    this.startButton = {
        element: document.getElementById("start-button"),
        keys: [32, 13],
        handlers: []
    };
    
    this.countdown = {
        length: 3000,
        timeLeft: 3000,
        running: null
    }

    this.announcer = document.getElementById("announcer");

    this.init();
}

Game.prototype.init = function() {
    this.space.make();
    this.enableStartButton();
}

Game.prototype.start = function() {    
    this.startClock();
    this.player.play();
    this.npc.play();
};

Game.prototype.startCountdown = function() {
    this.reset();
    this.disableButton(this.startButton);
    this.announcer.className += ' ' + "show";
    game = this;

    this.announcer.innerHTML = '<span class="center countdown">' + (this.countdown.timeLeft / 1000)  + '</span>';

    this.countdown.running = setInterval(function() {
        game.runCountdown();
    }, 1000);
};

Game.prototype.runCountdown = function() {   
    this.countdown.timeLeft -= 1000; 
    if (this.countdown.timeLeft === 0) {
        this.announcer.innerHTML = '<span class="center countdown">Go!</span>';
        this.start();
    } else {
        this.announcer.innerHTML = '<span class="center countdown">' + (this.countdown.timeLeft / 1000)  + '</span>';
    }

    if (this.countdown.timeLeft === -1000) { 
        this.stopCountdown();
    }
};

Game.prototype.stopCountdown = function() {
    clearInterval(this.countdown.running);
    Util.removeClass(this.announcer, "show");
    this.announcer.innerHTML = "";
    this.countdown.timeLeft = this.countdown.length;
    console.log(this.countdown.timeLeft);
}

Game.prototype.startClock = function() {
    var game = this;
    var infoPanel = game.clock.element.parentElement;

    Util.removeClass(game.clock.timeElement, "clock-stop");
    game.clock.timeElement.innerHTML = (game.clock.timeLimit / 1000) + "s";

    if ( Util.doesntHaveClass(infoPanel, "show") ) {
        infoPanel.className += ' ' + "show";
    }

    this.clock.running = setInterval(function() {
        game.runClock();
    }, 1000);
};

Game.prototype.runClock = function() {
    this.clock.timeLeft -= 1000;
    this.clock.timeElement.innerHTML = "<span>" + (this.clock.timeLeft / 1000)  + "s</span>";
    
    if (this.clock.timeLeft === 10000) {
        this.clock.timeElement.className += " clock-warning";
    }

    if (this.clock.timeLeft === 0) {
        this.stopClock();
        this.gameOver();
    }

    return false;
};

Game.prototype.stopClock = function() {
    clearInterval(this.clock.running);
    Util.removeClass(this.clock.timeElement, "clock-warning");
    this.clock.timeElement.className += " clock-stop";
}

Game.prototype.gameOver = function() {
    var player = this.player;
    var npc = this.npc;

    player.stop();
    npc.stop();
    
    player.updateScore();
    npc.updateScore();

    var playerScore = player.currentScore();
    var npcScore = npc.currentScore();

    if (playerScore > npcScore) {
        this.announcer.innerHTML = "You win!";
        this.winner(this.player.character);
        this.mouth("player-mouth", "smile");
        this.mouth("npc-mouth", "frown");
    }

    if (playerScore < npcScore) {
        this.announcer.innerHTML = "You lose!";
        this.mouth("player-mouth", "frown");
        this.winner(this.npc.character);
        this.mouth("npc-mouth", "smile");
    }

    if (playerScore === npcScore) {
        this.announcer.innerHTML = "It's a tie!";
    }

    this.enableStartButton();
};

Game.prototype.reset = function() {
    this.resetCharacters();
    this.resetBoard();
    this.resetScore();
    this.clock.timeLeft = this.clock.timeLimit;
    this.clock.timeElement.innerHTML = (this.clock.timeLimit / 1000) + "s";
};

Game.prototype.resetCharacters = function() {
    this.winner(false);
    this.mouth("player-mouth", false);
    this.mouth("npc-mouth", false);
    this.cells[0].appendChild(this.player.character.element);
    this.cells[99].appendChild(this.npc.character.element);
};

Game.prototype.resetBoard = function() {
    var numOfCells = this.cells.length;
    for (var i=0; i < numOfCells; i++) {
        this.cells[i].className = "cell";
    }

    this.announcer.innerHTML = "";
};

Game.prototype.resetScore = function() {
    this.player.updateScore();
    this.npc.updateScore();
};

Game.prototype.winner = function(character) {
    if (character === false) {
        var characters = document.getElementsByClassName("character");
        var numOfCharacters = characters.length;
        for (var i=0; i < numOfCharacters; i++) {
            Util.removeClass(characters[i], "winner");
        }

        return true;
    }

    character.element.className += " winner";
}

Game.prototype.mouth = function(mouth, emotion) {
    var mouths = document.getElementsByClassName(mouth);
    var numberOfMouths = mouths.length;

    if (emotion === false) {
        for (var i=0; i < numberOfMouths; i++) {
            Util.removeClass(mouths[i], "smile");
            Util.removeClass(mouths[i], "frown");
        }

        return true;
    }

    for (var i=0; i < numberOfMouths; i++) {
        mouths[i].className += " " + emotion;
    }
};

Game.prototype.enableStartButton = function(button) {
    game = this;
    startButton = this.startButton;
    Util.removeClass(startButton.element, "disabled");

    // == Add click event listener.
    startButton.handlers.push(
        EventHandler.addListener( "click", function() {
            game.startCountdown();
        }, startButton.element)
    );

    // Add keydown event listener.
    startButton.handlers.push(
        EventHandler.addListener("keydown", function(e) {
            if (startButton.keys.indexOf(e.keyCode) > -1) {
                e.preventDefault();
                game.startCountdown();                    
            }
        }, window)
    );

};

Game.prototype.disableButton = function(button) {
    var startButton = this.startButton;
    var numOfStartButtonHandlers = startButton.handlers.length;
    
    startButton.element.className += " disabled";
    
    // == Remove all startButton event listeners.
    for(i=0; i < numOfStartButtonHandlers; i++) {
        EventHandler.removeListener(startButton.handlers[i]);
    }
};